################################################################
##
## Rules and target patterns.
##
## Copyright (C) 2009-2013 Robin Klose
##
## This file is part of AVR3nk, available at 
## https://github.com/r3nk/AVR3nk
##
################################################################

################################################################
## PHONY targets
################################################################

.PHONY: default clean headers build install all program

# FORCE is actually obsolete since .PHONY is available
FORCE: 

################################################################


################################################################
## Execution mode selection (directory, library, application)
################################################################

ifndef OVERRIDE_DEFAULT_TARGETS

ifdef DIRECTORIES

default: all
clean: $(DIRECTORIES:%=subdir-clean-%)
headers: $(DIRECTORIES:%=subdir-headers-%)
build: $(DIRECTORIES:%=subdir-build-%)
install: $(DIRECTORIES:%=subdir-install-%)
all: clean build install
program: 

else ifdef LIBRARY

default: all
clean: clean-builddir
headers: $(MCU:%=mcu-install-headers-%)
build: $(MCU:%=mcu-build-objects-%) $(MCU:%=mcu-build-library-%)
install: headers $(MCU:%=mcu-install-library-%)
all: clean headers install
program: 

else ifdef APPLICATION

default: all
clean: clean-builddir
headers:
build: $(MCU:%=mcu-build-dependencies-%) $(MCU:%=mcu-build-objects-%) $(MCU:%=mcu-build-application-%)
install: build
all: clean build
program: write-program

else

$(error Makefile should define either DIRECTORIES, LIBRARY, or APPLICATION)

endif

endif #OVERRIDE_DEFAULT_TARGETS


################################################################
## DIRECTORY targets
################################################################

.PHONY: subdir-clean-%
subdir-clean-%:
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Making clean in \[$(SUBDIR)/$(@:subdir-clean-%=%)\]
	@$(SUBMAKE) -C $(@:subdir-clean-%=%) clean

.PHONY: subdir-headers-%
subdir-headers-%:
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Making headers in \[$(SUBDIR)/$(@:subdir-headers-%=%)\]
	@$(SUBMAKE) -C $(@:subdir-headers-%=%) headers

.PHONY: subdir-build-%
subdir-build-%:
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Building \[$(SUBDIR)/$(@:subdir-build-%=%)\]
	@$(SUBMAKE) -C $(@:subdir-build-%=%) build

.PHONY: subdir-install-%
subdir-install-%:
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Making install in \[$(SUBDIR)/$(@:subdir-install-%=%)\]
	@$(SUBMAKE) -C $(@:subdir-install-%=%) install


################################################################
## MCU targets
################################################################

.PHONY: mcu-clean-objects-%
mcu-clean-objects-%:
	@$(SUBMAKE) TARGET_MCU=$(@:mcu-clean-objects-%=%) clean-objects

.PHONY: mcu-clean-library-%
mcu-clean-library-%:
	@$(SUBMAKE) TARGET_MCU=$(@:mcu-clean-library-%=%) clean-library

.PHONY: mcu-clean-program-%
mcu-clean-program-%:
	@$(SUBMAKE) TARGET_MCU=$(@:mcu-clean-program-%=%) clean-program

.PHONY: mcu-build-objects-%
mcu-build-objects-%:
	@$(SUBMAKE) TARGET_MCU=$(@:mcu-build-objects-%=%) build-objects

.PHONY: mcu-build-library-%
mcu-build-library-%:
	@$(SUBMAKE) TARGET_MCU=$(@:mcu-build-library-%=%) build-library

.PHONY: mcu-build-dependencies-%
mcu-build-dependencies-%:
	@$(SUBMAKE) TARGET_MCU=$(@:mcu-build-dependencies-%=%) build-dependencies

.PHONY: mcu-build-application-%
mcu-build-application-%:
	@$(SUBMAKE) TARGET_MCU=$(@:mcu-build-application-%=%) build-application

.PHONY: mcu-install-headers-%
mcu-install-headers-%:
	@$(SUBMAKE) TARGET_MCU=$(@:mcu-install-headers-%=%) install-headers

.PHONY: mcu-install-library-%
mcu-install-library-%:
	@$(SUBMAKE) TARGET_MCU=$(@:mcu-install-library-%=%) install-library


################################################################
## DEPENDENCIES targets
################################################################

# build all dependencies:
.PHONY: build-dependencies
build-dependencies: $(DEPBUILDS_ITERATIVE) $(DEPBUILDS_RECURSIVE)


# build dependencies iteratively from list:
.PHONY: $(DEPBUILDS_ITERATIVE)
$(DEPBUILDS_ITERATIVE): 
	@$(SUBMAKE) -C $(TOPDIR)/$@ TARGET_MCU=$(TARGET_MCU) \
    BASE_SUBDIR=$(SUBDIR) build-ideps


.PHONY: build-ideps
build-ideps: install-headers build-objects build-library


# build dependencies recursively:
.PHONY: $(DEPBUILDS_RECURSIVE)
$(DEPBUILDS_RECURSIVE): 
	@$(SUBMAKE) -C $(TOPDIR)/$@ TARGET_MCU=$(TARGET_MCU) \
    BASE_SUBDIR=$(SUBDIR) build-rdeps


.PHONY: build-rdeps
build-rdeps: $(DEPENDENCIES) install-headers build-objects build-library install-rdeps-library


.PHONY: $(DEPENDENCIES)
$(DEPENDENCIES):
	@$(SUBMAKE) -C $(TOPDIR)/$@ TARGET_MCU=$(TARGET_MCU) \
    BASE_SUBDIR=$(BASE_SUBDIR) build-rdeps


################################################################
## CLEAN targets
################################################################

# clean build objects for target MCU
.PHONY: clean-objects
clean-objects:
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Deleting object files for MCU \[$(TARGET_MCU)\]
	$(AT) $(RM_F) $(BUILD_OBJECTS)

# clean built library for target MCU
.PHONY: clean-library
clean-library:
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Deleting library for MCU \[$(TARGET_MCU)\]
	$(AT) $(RM_F) $(BUILD_LIBRARY)

# clean all program files for target MCU
.PHONY: clean-program
clean-program:
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Deleting program files for MCU \[$(TARGET_MCU)\]
	$(AT) $(RM_F) $(BUILD_PROGRAM_ELF) $(BUILD_PROGRAM_MAP) \
	$(BUILD_PROGRAM_HEX) $(BUILD_PROGRAM_EEPROM) $(BUILD_PROGRAM_LSS)

# clean the whole build directory
.PHONY: clean-builddir
clean-builddir:
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Deleting built files
	$(AT) $(RM_RF) $(BUILD_TOP_DIR)

# clean the complete install tree
.PHONY: clean-install
clean-install:
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Deleting all installed files
	$(AT) $(RM_RF) $(TOPDIR)/install/*

# clean all files read from the MCU
.PHONY: clean-read
clean-read:
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Deleting all read files for MCU \[$(TARGET_MCU)\]
	$(AT) $(RM_RF) $(READ_PROGRAM_FILE) $(READ_EEPROM_FILE)


################################################################
## BUILD targets
################################################################

.PHONY: build-objects
ifeq ($(SOURCES), )
build-objects:
	@$(ECHO) 
	@$(ECHO) $(PREFIX) ERROR: You must specify the SOURCES variable in your makefile for target \[build-objects\]!
else
build-objects: $(BUILD_OBJECTS)
endif

$(BUILD_DIR)/%.o: %.c $(wildcard *.h) $(wildcard */*.h) $(TOPDIR)/$(BASE_SUBDIR)/Makefile Makefile
	@$(ECHO)
	@$(ECHO) $(PREFIX) Building object file for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) Compiling \[$<\] --\> \[$@\]
	$(AT)$(MKDIR_P) $(dir $@)
#	$(AT)$(CC) $(CFLAGS) $(CFLAGS_USER) -c $< -o $@
	$(AT) $(CD) $(TOPDIR) ; $(CC) $(CFLAGS) $(CFLAGS_USER) -c $(SUBDIR)/$< -o $(SUBDIR)/$@


.PHONY: build-library
ifeq ($(LIBRARY), )
build-library:
	@$(ECHO) 
	@$(ECHO) $(PREFIX) ERROR: You must specify the LIBRARY variable in your makefile for target \[build-library\]!
else
build-library: $(BUILD_LIBRARY)
endif

$(BUILD_DIR)/%.a: $(BUILD_OBJECTS)
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Building library for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) Archiving \[$?\] --\> \[$@\]
	$(AT)$(MKDIR_P) $(BUILD_DIR)
	$(AT)$(AR) $(ARFLAGS) $@ $?


.PHONY: build-application
ifeq ($(APPLICATION), )
build-application:
	@$(ECHO) 
	@$(ECHO) $(PREFIX) ERROR: You must specify the APPLICATION variable in your makefile for target \[build-application\]!
else
build-application: $(BUILD_PROGRAM_ELF) $(BUILD_PROGRAM_HEX) $(BUILD_PROGRAM_EEPROM) $(BUILD_PROGRAM_LSS)
endif

$(BUILD_DIR)/%.elf: $(BUILD_OBJECTS) $(IDEPS_LIBRARIES) $(RDEPS_LIBRARIES)
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Building ELF file for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) Linking \[$(BUILD_OBJECTS) $(LIBRARIES) $(IDEPS_LIBRARIES) $(RDEPS_LIBRARIES)\] --\> \[$(BUILD_PROGRAM_ELF)\]
	$(AT)$(MKDIR_P) $(BUILD_DIR)
	$(AT)$(CC) $(LDFLAGS) $(LDFLAGS_USER) $(BUILD_OBJECTS) $(LDDIRS) $(LDLIBS) $(LDDEPS) -o $(BUILD_PROGRAM_ELF)

$(BUILD_DIR)/%.hex: $(BUILD_PROGRAM_ELF)
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Generating HEX file for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) Objcpy \[$<\] --\> \[$@\]
	$(AT)$(MKDIR_P) $(BUILD_DIR)
	$(AT)$(OBJCPY) $(OBJCPY_HEX_FLAGS) $< $@

$(BUILD_DIR)/%.eep: $(BUILD_PROGRAM_ELF)
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Generating EEPROM file for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) Objcpy \[$<\] --\> \[$@\]
	$(AT)$(MKDIR_P) $(BUILD_DIR)
	-$(AT)$(OBJCPY) $(OBJCPY_EEP_FLAGS) $< $@ || exit 0

$(BUILD_DIR)/%.lss: $(BUILD_PROGRAM_ELF)
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Generating LSS file for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) Objdump \[$<\] --\> \[$@\]
	$(AT)$(MKDIR_P) $(BUILD_DIR)
	$(AT)$(OBJDUMP) $(OBJDUMP_FLAGS) $< > $@

################################################################
## INSTALL targets
################################################################

.PHONY: install-headers
ifeq ($(HEADERS), )
install-headers:
	@$(ECHO) 
	@$(ECHO) $(PREFIX) ERROR: You must specify the HEADERS variable in your makefile for target \[install-headers\]!
else
install-headers: $(INSTALL_HEADERS)
endif

$(INSTALL_HEADERS_PKG_DIR)/%.h: %.h
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Installing header file for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) Copying \[$<\] --\> \[$@\]
	$(AT)$(MKDIR_P) $(INSTALL_HEADERS_PKG_DIR)
	$(AT)$(CP) $< $@

$(INSTALL_HEADERS_PKG_DIR)/%.h: */%.h
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Installing header file for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) Copying \[$<\] --\> \[$@\]
	$(AT)$(MKDIR_P) $(INSTALL_HEADERS_PKG_DIR)
	$(AT)$(CP) $< $@


.PHONY: install-library
ifeq ($(LIBRARY), )
install-library:
	@$(ECHO) 
	@$(ECHO) $(PREFIX) ERROR: You must specify the LIBRARY variable in your makefile for target \[install-library\]!
else
install-library: build-objects $(INSTALL_LIBRARY)
endif

$(INSTALL_LIBRARY_DIR)/%.a: $(BUILD_DIR)/%.a
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Installing library for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) Copying \[$<\] --\> \[$@\]
	$(AT)$(MKDIR_P) $(INSTALL_LIBRARY_DIR)
	$(AT)$(CP) $< $@


.PHONY: install-rdeps-library
install-rdeps-library: $(RDEPS_LIBRARY)

$(RDEPS_LIBRARY): $(BUILD_LIBRARY)
	@$(ECHO) $(PREFIX) Copying \[$<\] --\> \[$@\]
	$(AT)$(MKDIR_P) $(RDEPS_LIBRARY_DIR)
	$(AT)$(CP) $< $@


################################################################
## PROGRAM targets
################################################################

# Display memory usage on the command line
.PHONY: size
size: $(BUILD_PROGRAM_ELF) $(BUILD_PROGRAM_HEX) $(BUILD_PROGRAM_EEPROM)
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Calculating size of \[$<\] for MCU \[$(TARGET_MCU)\]
	@$(ECHO) 
	$(AT) $(SIZE) --mcu=$(TARGET_MCU) --format=avr $<
	$(AT)$(ECHO) $(word 2, $^):
	$(AT) $(SIZE) --target=ihex $(word 2, $^)
	@$(ECHO) 
	$(AT)$(ECHO) $(word 3, $^):
	$(AT) $(SIZE) --target=ihex $(word 3, $^)


# Write program to flash memory
.PHONY: write-program
write-program: $(BUILD_PROGRAM_HEX)
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Flashing program memory for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) --\> \[$<\]
	$(AT) $(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_USER_FLAGS) -U flash:w:$<:i


# Write EEPROM
.PHONY: write-eeprom
write-eeprom: $(BUILD_PROGRAM_EEPROM)
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Writing EEPROM for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) --\> \[$<\]
	$(AT) $(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_USER_FLAGS) -U eeprom:w:$<:a


# Write both flash and EEPROM
.PHONY: write-all
write-all: $(BUILD_PROGRAM_HEX) $(BUILD_PROGRAM_EEPROM)
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Writing program memory and EEPROM for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) --\> \[$^\]
	$(AT) $(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_USER_FLAGS) -U flash:w:$<:i -U eeprom:w:$(word 2, $^):a


# Verify program, i.e. read the program from flash and compare with locally stored programming file
.PHONY: verify-program
verify-program: $(BUILD_PROGRAM_HEX)
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Verify program memory for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) --\> \[$<\]
	$(AT) $(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_USER_FLAGS) -U flash:v:$<:i


# Verify EEPROM, i.e. read eeprom from flash and compare with locally stored EEPROM file
.PHONY: verify-eeprom
verify-eeprom: $(BUILD_PROGRAM_EEPROM)
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Verifying EEPROM for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) --\> \[$<\]
	$(AT) $(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_USER_FLAGS) -U eeprom:v:$<:a


# Verify both flash and EEPROM
.PHONY: verify-all
verify-all: $(BUILD_PROGRAM_HEX) $(BUILD_PROGRAM_EEPROM)
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Verifying program memory and EEPROM for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) --\> \[$^\]
	$(AT) $(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_USER_FLAGS) -U flash:v:$<:i -U eeprom:v:$(word 2, $^):a


# Read the program from flash and store it
.PHONY: read-program
read-program: $(READ_PROGRAM_FILE)

$(READ_DIR)/%.hex: FORCE
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Reading program memory for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) --\> \[$@\]
	$(AT)$(MKDIR_P) $(READ_DIR)
	$(AT) $(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_USER_FLAGS) -U flash:r:$@:i


# Read the EEPROM and store it
.PHONY: read-eeprom
read-eeprom: $(READ_EEPROM_FILE)

$(READ_DIR)/%.eep: FORCE
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Reading EEPROM for MCU \[$(TARGET_MCU)\]
	@$(ECHO) $(PREFIX) --\> \[$@\]
	$(AT)$(MKDIR_P) $(READ_DIR)
	$(AT) $(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_USER_FLAGS) -U eeprom:r:$@:i


# Read both program and EEPROM and store it
.PHONY: read-all
read-all: $(READ_PROGRAM_FILE) $(READ_EEPROM_FILE)


# Erase the device, i.e. erase program memory, EEPROM and clear lock bits
.PHONY: erase
erase: $(BUILD_PROGRAM_HEX)
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Erasing program memory and EEPROM and clearing lock bits for MCU \[$(TARGET_MCU)\]
	$(AT) $(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_USER_FLAGS) -e


# Initialize a erase-write cycle counter that is stored at the last 4 bytes of the device EEPROM
.PHONY: avrdude-init-counter
avrdude-init-counter: FORCE
	@$(ECHO) 
	@$(ECHO) $(PREFIX) Initializing erase-write cycle counter with $(AVRDUDE_EW_CYCLE_COUNT) for MCU \[$(TARGET_MCU)\]
	$(AT) $(AVRDUDE) $(AVRDUDE_FLAGS) -Y $(AVRDUDE_EW_CYCLE_COUNT)
